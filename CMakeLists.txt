cmake_minimum_required(VERSION 3.13)

project(AbInitio)

option(USE_MKL "Find and use MKL if true." False)
option(MATH_ROOT "The root directory for lapack, lapacke, blas, and cblas." 0)
option(LAPACKE_DIR "The root directory for lapacke." 0)
option(LAPACKE_INC_DIR "The directory to find lapacke.h" 0)
option(LAPACKE_HEADER "The header file for lapacke" 0)
option(LAPACKE_LIB_DIR "The directory to find the lapacke library.")
option(LAPACKE_LIB "The name of the lapacke library.")
option(LAPACK_DIR "The root directory for lapack" 0)
option(LAPACK_INC_DIR "The directory to find lapack.h" 0)
option(VALGRIND "Fully qualified path for valgrind, if not in the standard search path.")
option(EXTRAMATH_DIR "Path to find the integral library and header." 0)

if(NOT EXTRAMATH_DIR)
  message(SEND_ERROR "Need to know where to find extramath.")
endif()
include_directories(${EXTRAMATH_DIR}/include)

if(USE_MKL)
  message("-- Using MKL.")
  set(BLA_VENDOR Intel10_64lp)
endif()

if(USE_MKL)
  if(NOT MATH_ROOT)
    if(CMAKE_SYSTEM_NAME STREQUAL "Linux")
      set(MATH_ROOT /opt/intel/oneapi/mkl/latest)
    else()
      message(SEND_ERROR "Not set up to find LAPACKE using default directories on Windows or MacOS.")
    endif()
  endif()
  set(MKLROOT ${MATH_ROOT})
  if(NOT LAPACKE_DIR)
    set(LAPACKE_DIR ${MATH_ROOT})
  endif()
  if(NOT LAPACKE_INC_DIR)
    set(LAPACKE_INC_DIR ${LAPACKE_DIR}/include)
  endif()
  if(NOT LAPACKE_HEADER)
    set(LAPACKE_HEADER mkl_lapacke.h)
  endif()
  if(NOT LAPACK_DIR)
    set(LAPACK_DIR ${MATH_ROOT})
  endif()
  if(NOT LAPACK_INC_DIR)
    set(LAPACK_INC_DIR ${LAPACK_DIR}/include)
  endif()
else()
  if(NOT MATH_ROOT)
    if(CMAKE_SYSTEM_NAME STREQUAL Linux)
      set(MATH_ROOT /usr)
      if(NOT LAPACKE_DIR)
	set(LAPACKE_DIR /usr)
	if(NOT LAPACKE_INC_DIR)
	  set(LAPACKE_INC_DIR /usr/include)
	endif()
	if(NOT LAPACKE_LIB_DIR)
	  set(LAPACKE_LIB_DIR /usr/lib/x86_64-gnu/)
	endif()
      endif()
    else()
      message(SEND_ERROR "Not set up to find LAPACKE using default directories on Windows or MacOS.")
    endif()
  endif()
  if(NOT LAPACKE_DIR)
    set(LAPACKE_DIR MATH_ROOT)
  endif()
  if(NOT LAPACKE_INC_DIR)
    set(LAPACKE_INC_DIR ${LAPACKE_DIR}/include)
  endif()
  if(NOT LAPACKE_HEADER)
    set(LAPACKE_HEADER lapacke.h)
  endif()
  if(NOT LAPACKE_LIB_DIR)
    set(LAPACKE_LIB_DIR ${LAPACKE_DIR}/lib)
  endif()
  if(NOT LAPACKE_LIB)
    set(LAPACKE_LIB lapacke)
  endif()
  if(NOT LAPACK_DIR)
    set(LAPACK_DIR ${MATH_ROOT})
  endif()
  if(NOT LAPACK_INC_DIR)
    set(LAPACK_INC_DIR ${LAPACK_DIR}/include)
  endif()
endif()

include(CheckLibraryExists)
include(FindBLAS)
include(FindLAPACK)
include(CTest)
include(FindThreads)

check_library_exists(m sin "" MATH)

if(${MATH})
  set(MATH m)
endif()

if(BUILD_TESTING)
  
  add_compile_options(--coverage -Og -g3 -ggdb -lgcov -pg)
  add_subdirectory(tests)

else()

  add_compile_options(-Ofast)

endif()

if(LAPACKE_INC_DIR)
  message("-- Including " ${LAPACKE_INC_DIR})
  include_directories(${LAPACKE_INC_DIR})
endif()

if(LAPACK_INC_DIR)
  message("-- Including " ${LAPACK_INC_DIR})
  include_directories(${LAPACK_INC_DIR})
endif()


set(CMAKE_POSITION_INDEPENDENT_CODE ON)
add_library(abinit SHARED)
add_dependencies(abinit util basis_sets input geometric opts integrals)

#if(BUILD_TESTING)
#  target_link_libraries(abinit PUBLIC gcov)
#endif()


set_target_properties(abinit PROPERTIES POSITION_INDEPENDENT_CODE True)

add_subdirectory(src)
include_directories(src)

add_compile_options(-Wall -Wextra -Werror)

#if(LAPACK_LINKER_FLAGS)
#  target_link_options(abinit ${LAPACK_LINKER_FLAGS})
#endif()
#if(BLAS_LINKER_FLAGS)
#  target_link_options(abinit ${BLAS_LINKER_FLAGS})
#endif()

#target_link_directories(abinit PUBLIC ${LAPACKE_LIB_DIR} ${EXTRAMATH_DIR}/lib)
#if(LAPACKE_LIB)
#  target_link_libraries(abinit PUBLIC extramath ${LAPACKE_LIB} ${MATH} ${LAPACK_LIBRARIES})
#else()
#  target_link_libraries(abinit PUBLIC extramath ${MATH} ${LAPACK_LIBRARIES})
#endif()

target_link_libraries(abinit PUBLIC ${CMAKE_THREAD_LIBS_INIT})


install(TARGETS abinit LIBRARY)

